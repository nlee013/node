/*
  *패스포트는 수백가지 인증방식(Strategy)을 제공 하는데 
  어떤 인증 방식을 사용할지 Strategy를 선택
  Local Strategy, Facebook Strategy, Google Strategy,
  Kakao Strategy, Naver Strategy..
  
  * 대표적 인증 방식
  로컬 인증: 데이터베이스에 저장된 사용자 정보와 비교
  OAuth 인증: 페이스북이나 트위터계정 사용
  
  -------------------------------------------------------------
  
	<모듈설치>
	사용자 인증처리 필수 모듈
	npm install passport-local --save

	로컬인증기능(사용자 입력 정보와 DB정보 비교)
	npm install passport --save
	npm install passport-kakao --save
	npm install passport-facebook --save
	
	-serializeUser():사용자 로그인(인증) 성공 시 호출
	-deserializeUser():사용자 로그인(인증) 이후 사용자 요청 시마다 호출
		

	요청객체에 메세지를 넣어둘수있는 기능
	다른 함수나,뷰템플릿 처리 함수에 메세지 전달
	사용자에게 메세지 전달(메세지를 넘겨주는 애라고 기억해두기**)
	npm install connect-flash --save

*/

//Express 기본 모듈
require("dotenv").config();
var express = require("express");
var http = require("http");
var path = require("path");
var serveStatic = require("serve-static");
var expressErrorHandler = require("express-error-handler");
var expressSession = require("express-session");

//추가
var passport = require("passport");
var flash = require("connect-flash");

//var user = require("./router/user"); 
var config = require("./config");//모듈화 분리해둔 파일 불러온것
var routerLoader = require("./router/routerLoader");
var database = require("./database/database");

//익스프레스 객체 생성
var app = express();

//뷰엔진 설정-----------------------------------------------------------추가(22/04/07)
app.set("views", __dirname + "/views");
app.set("view engine", "ejs");
console.log("뷰엔진이 ejs로 설정 되었습니다.");

//app.set("view engine", "jade");
//console.log("뷰엔진이 jade로 설정 되었습니다.");

app.set("port",process.env.PORT||config.serverPort);

app.use(express.urlencoded({extended:false}));

app.use("/public",serveStatic(path.join(__dirname,"public")));//왼쪽은 가상, 오른쪽은 실제주소

app.use(expressSession({
	
	secret:"my key",
	resave:true,
	saveUninitialized:true
	
}));

//추가-----------------------------(22/04/08)
app.use(passport.initialize());
app.use(passport.sesstion());
app.use(flash());
//--------------------------------------------------------

//라우터 객체 생성
var router = express.Router();

routerLoader.init(app, router);//오류나는 경우는 아래처럼 사용

//routerLoader.init(app,  express.Router());--위에 var router = express.Router();  주석처리 후 사용(직접 넣어주기)

/********************************************************************************
클라이언트 요청	  	 웹서버				뷰템플릿

홈화면조회			/				홈화면  (index.ejs)
로그인화면조회		/login(get)		로그인화면(login.ejs) 		login.jsp
로그인요청			/login(post)	로그인처리(함수)			login_ok.jsp
회원가입조회		/signup(get)	회원가입화면(signup.ejs)	created.jsp
회원가입요청		/signup(post)	회원가입처리(함수)			created_ok.jsp
사용자프로필		/profile(get)	프로필화면(profile.ejs)
로그아웃요청		/logout(get)	로그아웃처리(함수)

*********************************************************************************/

//홈화면 만들기
router.route("/").get(function(req, res){
	
	res.render("index.ejs");
	
});

//로그인 화면 만들기
router.route("/login").get(function(req, res){
	
	res.render("index.ejs", {message:req.flash("loginMeassgae")});
	
});

//로그인 요청 만들기
//local-login는 아래 함수 이름 passport.use("local-login"
router.route("/login").post(passport.authenticate("local-login", {

	successRedirect : "profile", //login 성공
	failureRedirect : "/login", //login 실패
	failureFlash : true //login 실패 시, 메세지
	
}));


//********************************************************************************
//Passport Strategy 설정-----------------------------------추가(22/04/08)
var LocalStrategy = require("passport-local").Strategy;

//Passport Login
//use("사용자 정의 이름 - 인증방식 객체")
//이름은 함수 구분 용도, done()함수는 예약어이므로 바꾸면 안된다
passport.use("local-login", new LocalStrategy({
	
	usernameField : "email",
	passwordField : "pwd",
	
	//아래 만들 callback함수의 첫번째 parameter로 request 객체를 전달함.
	passReqToCallback : true 
	
	}, function(req, email, pwd, done) {
		
		//사용자가 이메일과 비밀번호를 입력했고
		//db에 있는지 확인한다
		//DB객체 생성
		var database = app.get("database");
		
		//user에는 email에 대한 정보가 들어감
		database.UserModel.findOne({"email":email}, function(err, user) {
			
			if(err) {throws done(err);}
			
			if(!user){//등록자가 없는 경우 (email이 없을 때)
				
				console.log("등록된 계정이 없습니다.");
				
				//검증하는 callback()함수에서 2번째 parameter값을 false로 해서
				//인증 실패한 것으로 처리하는 작업
				return done(null, flash, req.flash("loginMessage", "등록된 계정이 없습니다."));
			}
			
			//비밀번호 비교해서 틀린 경우
			var authenticated =
				//userSchema의 line57 부른것
				user.authenticate(pwd, user._doc.salt, user._doc.hashed_password);
			
			if(!authenticated){
				
				console.log("비밀번호가 일치하지 않음.");
				
				return done(null, flash, req.flash("loginMessage", "비밀번호가 일치하지 않습니다."));
			}
			
			//비밀번호 비교해서 일치한 경우
			console.log("비밀번호가 일치함.");
			
			return done(null, user);
		});
		
	}));
//passport 회원가입
passport.user("local-signup", new LocalStrategy({
	
	usernameField : "email",
	passwordField : "pwd",
	
	//아래 만들 callback함수의 첫번째 parameter로 request 객체를 전달함.
	passReqToCallback : true 
	
	}, function(req, email, pwd, done) {
		
		//회원가입 할 때 필요한 아이디 비밀번호 받아내기
		var name = req.body.name;//post방식
		
		process.nextTick(function(){
			
			var database = app.get("database");
			
			database.UserModel.findOne({"email":email}, function(err, user) {
				
				if(err) {return done(err);}
				
				//기존 사용자 정보가 (이미 회원가입이 되어) 있는 경우
				if(user){
					
					console.log("이미 회원가입 되어있음.");
					return done(null, flash, req.flash("loginMessage", "이미 회원가입 되어있습니다."));

				}else{//회원가입 시키기
					
					var user = new database.UserModel({"email":email, "pwd":pwd, "name":name});
	
						user.save(function(err) {
							
							if(err) {throw err;}
							
							console.log("사용자 데이터 추가 함.");
							
							return done(null, user);
							
						});//user.save(function(err

				}//else
				
			})//findOne
		});//nextTick

	}//function
	
));//끝


//사용자 인증 성공 시 호출
//사용자 정보를 이용해서 세션을 만듦
passport.serializeUser(function(user, done) {
	
	console.log("serializeUser 호출된다..");
	//console.log(user); //--확인용
	
	done(null, user);
	
});

//사용자 인증 후, 사용자 요청 시마다 호출이 된다
//function(user, done)의 user는 사용자 인증 성공 시, serializeUser()함수를 이용해서
//만든 session 정보가 parameter로 넘어옴
passport.deserializeUser(function(user, done) {
	
	console.log("deserializeUser 호출된다..");
	
	//이 인증 callback()함수에서 넘겨주는 user 객체의 정보로 sessrion생성
	done(null, user);//callback함수
	
});

var errorHandler = expressErrorHandler({
	
	static: {
		"404":"./public/404.html"
	}
	
});

app.use(expressErrorHandler.httpError(404));
app.use(errorHandler);


//Express 서버 시작
//var host = localhost;--ip로 접근
http.createServer(app).listen(app.get("port"),function(){
	
	console.log("익스프레스 서버를 시작했습니다: " + app.get("port"));
	
	//DB연결 함수 호출
	database.init(app, config);//app, confg-매개변수, init-변수
	
});












