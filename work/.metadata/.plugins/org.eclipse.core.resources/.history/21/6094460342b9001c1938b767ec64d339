/*
- Web Socket : 웹 서버로 소켓을 연결한후 데이터를 주고받을 수 
  있도록 만든 HTML5 표준으로 웹브라우져가 이 기능을 지원하지 않아도
  Web Socket을 사용할 수 있게 만든것이 Socket.io 모듈
  
- cors모듈 : Ajax의 XMLHttpRequest 는 보안 문제를 이유로  
  웹사이트를 제공하는 서버이외의 다른서버에는 접속할 수 없는데 
  cors (Cross-Origin Resource Sharing)를 사용하면 제약이 풀림
*/
require("dotenv").config();
var express = require("express");
var http = require("http");
var path = require("path");
var serveStatic = require("serve-static");
var expressErrorHandler = require("express-error-handler");
var expressSession = require("express-session");

var passport = require("passport");
var flash = require("connect-flash");

var config = require("./config");
var database = require("./database/database");
var routerLoader = require("./router/routerLoader");

//익스프레스 객체 생성
var app = express();

//뷰엔진 설정
app.set("views",__dirname + "/views");
app.set("view engine","ejs");
console.log("뷰엔진이 ejs로 설정 되었습니다");

app.set("port",process.env.PORT||config.serverPort);

app.use(express.urlencoded({extended:false}));

app.use("/public",serveStatic(path.join(__dirname,"public")));

app.use(expressSession({
	
	secret:"my key",
	resave:true,
	saveUninitialized:true
	
}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());


//라우터 객체 생성
var router = express.Router();

routerLoader.init(app,router);

//Passport 설정!
var configPassport = require("./passport/passport");
configPassport(app, passport);

//Passport Router 설정!
var userPassport = require("./router/userPassport");
userPassport(router, passport);



//*********************************************************
//Passport Strategy 설정
var LocalStrategy = require("passport-local").Strategy;

//패스포트 로그인
//use(이름,인증방식객체) - 이름은 함수 구분용도
//done() 메소드는 예약어
passport.use("local-login", new LocalStrategy({
	
	usernameField : "email",
	passwordField : "pwd",
	
	//아래 콜백함수의 첫번째 파라미터로 req 객체를 전달함
	passReqToCallback : true
	
	}, function(req,email,pwd,done){
		
		//데이터베이스 객체
		var database = app.get("database");
		
		database.UserModel.findOne({"email":email},function(err,user){
			
			if(err) {return done(err);}
			
			if(!user){ //등록자가 없을때
				
				console.log("등록된 계정이 없습니다.");
				
				//검증 콜백에서 두번째 파라미터 값을 false로 해서 
				//인증 실패한것으로 처리
				return done(null,false,req.flash("loginMessage","등록된 계정이 없습니다."));
				
			}
			
			//비밀번호를 비교해서 틀릴경우
			var authenticated = 
				user.authenticate(pwd, user._doc.salt, user._doc.hashed_password);
			
			if(!authenticated){
				
				console.log("비밀번호가 일치하지 않음.");
				
				return done(null,false,req.flash("loginMessage","비밀번호가 일치하지 않음."));				
				
			}
						
			//비밀번호가 맞을경우			
			console.log("비밀번호가 일치함.");
			
			return done(null,user);			
			
		});
		
	}));


//패스포트 회원가입
passport.use("local-signup", new LocalStrategy({

	usernameField : "email",
	passwordField : "pwd",
	
	//아래 콜백함수의 첫번째 파라미터로 req 객체를 전달함
	passReqToCallback : true
	
	},function(req,email,pwd,done){
		
		var name = req.body.name;
		
		process.nextTick(function(){
			
			var database = app.get("database");
			
			database.UserModel.findOne({"email":email},function(err,user){
				
				if(err) {return done(err);}
				
				//이미 회원가입이 되어 있는경우
				if(user){
					
					console.log("회원가입이 되어 있습니다.");
					
					return done(null,false,req.flash("signupMessage","회원가입이 되어 있습니다."));	
					
				}else{
					
					var user = new database.UserModel({"email":email,"pwd":pwd,"name":name});
					
					user.save(function(err){
					
						if(err) {throw err;}
						
						console.log("사용자 데이터 추가 함.");
						
						return done(null,user);
						
					});//end..if
				}//findOne
			});//nextTick
		});//function
	}
));


//사용자 인증 성공시 호출
//사용자 정보를 이용해서 세션을 만듬
passport.serializeUser(function(user,done){
	
	console.log("serializeUser 호출됨.");
	
	//이 인증 콜백함수에서 넘겨주는 user 객체의 정보로
	//session를 생성
	done(null,user);
	
});

//사용자 인증후 사용자 요청시마다 호출
//user : 사용자 인증 성공시 serializeUser 함수를 이용해서
//만든 세션정보가 파라미터로 넘어옴
passport.deserializeUser(function(user,done){
	
	console.log("deserializeUser 호출됨.");
	
	done(null,user);
	
});


var errorHandler = expressErrorHandler({
	
	static: {
		"404":"./public/404.html"
	}
	
});

app.use(expressErrorHandler.httpError(404));
app.use(errorHandler);


//Express 서버 시작

var host = "localhost";

http.createServer(app).listen(app.get("port"),host,function(){
	
	console.log("익스프레스 서버를 시작했습니다: " + app.get("port"));
	
	//DB연결 함수 호출
	database.init(app,config);
	
});












